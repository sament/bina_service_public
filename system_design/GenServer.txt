# GenServer provides client/server functionality out
# of the box. In particular, it provides the following functionality that’s common to all
# servers:
#  Spawning the server process
#  Maintaining state within the server
#  Handling requests and sending responses
#  Stopping the server process


# GenServer has the generic side covered. You, on the other hand, have to provide the
# following business logic:
#  The state with which you want to initialize the server
#  The kinds of messages the server handles
#  When to reply to the client
#  What message to use to reply to the client
#  What resources to clean up after termination

# OTP behaviors and their functionality
# Behavior      Used for...
# GenServer     Implementing the server of a client-server relationship
# GenEvent      Implementing event-handling functionality
# Supervisor    Implementing supervision functionality
# Application   Working with applications and defining application callbacks


# GenServer callbacks and their expected return values
# Callback                            Expected return values
# init(args)                          {:ok, state}
#                                     {:ok, state, timeout}
#                                     :ignore
#                                     {:stop, reason}

# handle_call(msg, {from, ref},state) {:reply, reply, state}
#                                     {:reply, reply, state, timeout}
#                                     {:reply, reply, state, :hibernate}
#                                     {:noreply, state}
#                                     {:noreply, state, timeout}
#                                     {:noreply, state, hibernate}
#                                     {:stop, reason, reply, state}
#                                     {:stop, reason, state}

# handle_cast(msg, state)             {:noreply, state}
#                                     {:noreply, state, timeout}
#                                     {:noreply, state, :hibernate}
#                                     {:stop, reason, state}

# handle_info(msg, state)             {:noreply, state}
#                                     {:noreply, state, timeout}
#                                     {:stop, reason, state}
# terminate(reason, state)            :ok
# code_change(old_vsn, state, extra)  {:ok, new_state}
#                                     {:error, reason}




# iex(1)> alias Cache.Worker
# Cache.Worker
# iex(2)> Worker.start_link
# {:ok, #PID<0.148.0>}
# iex(3)>  Worker.write(:sam, %{:actors => [1,2, "ccc", 4], :events => %{:event_lists => []}})
# %{sam: %{actors: [1, 2, "ccc", 4], events: %{event_lists: []}}}
# iex(4)> # %{sam: %{actors: [1, 2, "ccc", 4], events: %{event_lists: []}}}
# nil
# iex(5)> Worker.read(:sam)
# %{actors: [1, 2, "ccc", 4], events: %{event_lists: []}}
# iex(6)>  Worker.write(:sam, %{:actors => [1,2, "ccc", 4], :events => %{:event_lists => []}})
# %{sam: %{actors: [1, 2, "ccc", 4], events: %{event_lists: []}}}
# iex(7)> # dd
# nil
# iex(8)> #d
# nil
# iex(9)>  Worker.write(:iso, %{:actors => [1,2, "ccc", 4], :events => %{:event_lists => []}})
# %{
#   iso: %{actors: [1, 2, "ccc", 4], events: %{event_lists: []}},
#   sam: %{actors: [1, 2, "ccc", 4], events: %{event_lists: []}}
# }
# iex(10)>  Worker.write(:otu, %{:actors => [1,2, "ccc", 4], :events => %{:event_lists => [3,4,56,6,7, [4,5,6,7], 8]}})
# %{
#   iso: %{actors: [1, 2, "ccc", 4], events: %{event_lists: []}},
#   otu: %{
#     actors: [1, 2, "ccc", 4],
#     events: %{event_lists: [3, 4, 56, 6, 7, [4, 5, 6, 7], 8]}
#   },
#   sam: %{actors: [1, 2, "ccc", 4], events: %{event_lists: []}}
# }
# iex(11)> Worker.read(:sam)
# %{actors: [1, 2, "ccc", 4], events: %{event_lists: []}}
# iex(12)> Worker.read(:otu)
# %{
#   actors: [1, 2, "ccc", 4],
#   events: %{event_lists: [3, 4, 56, 6, 7, [4, 5, 6, 7], 8]}
# }
# iex(13)> Worker.read(:iso)
# %{actors: [1, 2, "ccc", 4], events: %{event_lists: []}}
# iex(14)>  Worker.write(:list, [3,4,5])
# %{
#   iso: %{actors: [1, 2, "ccc", 4], events: %{event_lists: []}},
#   list: [3, 4, 5],
#   otu: %{
#     actors: [1, 2, "ccc", 4],
#     events: %{event_lists: [3, 4, 56, 6, 7, [4, 5, 6, 7], 8]}
#   },
#   sam: %{actors: [1, 2, "ccc", 4], events: %{event_lists: []}}
# }
# iex(15)> Worker.read(:list)
# [3, 4, 5]
